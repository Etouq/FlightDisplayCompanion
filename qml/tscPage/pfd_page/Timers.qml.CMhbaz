import QtQuick 2.15
import "../"
import "../styled_controls"
import "../styled_controls/gradientButtonElements"

TscPageBase {
    id: root

    showBackButton: true
    showHomeButton: true

    pageTitle: "Timers"

    signal timeValueClicked(var _callback, int _startingValue)


    function formatTimeFromMS(_time) {
        let seconds = Math.floor(_time / 1000) % 60;
        let minutes = Math.floor(_time / 60000) % 60;
        let hours = Math.floor(_time / 3600000) % 24;
        timerValue = "00".slice(0, 2 - hours.length) + hours + ":" + "00".slice(0, 2 - minutes.length) + minutes + ":" + "00".slice(0, 2 - seconds.length) + seconds;
    }

    function getCurrentDisplayTime() {

        let baseTime = tscBackend.baseTime;
        let isCounting = tscBackend.isCounting;

        if (!isCounting) {
            return baseTime;
        }

        let currTime = Date.now();
        let beginTime = tscBackend.beginTime;
        let isCountingDown = tscBackend.isCountingDown;

        if (isCountingDown && baseTime + beginTime - currTime <= 0) { // counting down and passed 0
            isCountingDown = false;
            baseTime = 0;
            beginTime = currTime;
            tscBackend.isCountingDown = false;
            tscBackend.baseTime = 0;
            tscBackend.beginTime = currTime;
        }
        if (!isCountingDown && baseTime - beginTime + currTime >= 86400000) { // counting up and passed 24H
            baseTime = 0;
            beginTime = currTime;
            tscBackend.baseTime = 0;
            tscBackend.beginTime = currTime;
        }

        return isCountingDown ? baseTime + beginTime - currTime : baseTime - beginTime + currTime;
    }

    Timer {
        interval: 100
        repeat: true
        running: tscBackend.isCounting

    }

    GradientButton {
        width: 340.48
        height: 144
        anchors.horizontalCenter: parent.left
        anchors.horizontalCenterOffset: 576
        y: 152

        Text {
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.top: parent.top
            anchors.topMargin: 4
            font.family: "Roboto Mono"
            font.bold: true
            color: "white"
            font.pixelSize: 32
            text: "Time"
        }

        Text {
            id: timerValue
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.top: parent.top
            anchors.topMargin: 40
            font.family: "Roboto Mono"
            font.bold: true
            color: "aqua"
            font.pixelSize: 56
            text: "00:00:00"
        }

        onReleased: root.timeValueClicked()
    }

    Rectangle {
        id: centerGroup
        y: 368
        anchors.horizontalCenter: parent.left
        anchors.horizontalCenterOffset: 576
        height: 360
        width: 340.48
        border.width: 1.6
        border.color: "white"
        color: "transparent"

        Text {
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.top: parent.top
            anchors.topMargin: 4
            font.family: "Roboto Mono"
            font.bold: true
            color: "white"
            font.pixelSize: 32
            text: "Count"
        }

        GradientButton {
            anchors.horizontalCenter: parent.horizontalCenter
            width: 323.7888
            height: 144
            y: 46.8

            UpperTitle {
                text: "Up"
            }

            GradientStatusBar {
                id: upTimerStatus
                active: !downTimerStatus.active
            }

            onReleased: tscBackend.isCountingDown = false;
        }

        GradientButton {
            anchors.horizontalCenter: parent.horizontalCenter
            width: 323.7888
            height: 144
            y: 201.6

            UpperTitle {
                text: "Down"
            }

            GradientStatusBar {
                id: downTimerStatus
                active: tscBackend.isCountingDown
            }

            onReleased: tscBackend.isCountingDown = true;
        }
    }

    GradientButton {
        anchors.right: centerGroup.left
        anchors.rightMargin: 31.424
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 108

        UpperTitle {
            text: "Reset"
        }
    }

    GradientButton {
        anchors.left: centerGroup.right
        anchors.leftMargin: 31.424
        anchors.bottom: parent.bottom
        anchors.bottomMargin: 108

        UpperTitle {
            text: tscBackend.isCounting ? "Stop" : "Start"
        }
    }


}
